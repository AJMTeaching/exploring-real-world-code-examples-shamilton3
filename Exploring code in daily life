Code that specifies when an alarm clock should start making audible sounds.
from datetime import datetime   
from playsound import playsound
alarm_time = input("Enter the time of alarm to be set:HH:MM:SS\n")
alarm_hour=alarm_time[0:2]
alarm_minute=alarm_time[3:5]
alarm_seconds=alarm_time[6:8]
alarm_period = alarm_time[9:11].upper()
print("Setting up alarm..")
while True:
    now = datetime.now()
    current_hour = now.strftime("%I")
    current_minute = now.strftime("%M")
    current_seconds = now.strftime("%S")
    current_period = now.strftime("%p")
    if(alarm_period==current_period):
        if(alarm_hour==current_hour):
            if(alarm_minute==current_minute):
                if(alarm_seconds==current_seconds):
                    print("Wake Up!")
                    playsound('audio.mp3')
                    break
# Website link: https://thecleverprogrammer.com/2021/01/13/alarm-clock-with-python/

Code for a rocket targeting system.
for (int i = 0; i != roots.Count; i++)
{
    double x;
    double y;
    double z;
    if (pam == 0.0 && pvm == 0.0)
    {
        x = svx;
        y = svy;
        z = svz;
    }
    else
    {
        x = 0.5 * tax * roots[i] * roots[i] + tvx * roots[i] + tpx;
        y = 0.5 * tay * roots[i] * roots[i] + tvy * roots[i] + tpy;
        z = 0.5 * taz * roots[i] * roots[i] + tvz * roots[i] + tpz;
    }
    double m = Math.Sqrt((x * x + y * y + z * z));
    if (m < double.Epsilon)
        m = 1.0;
    vectors[i, 0] = x / m;
    vectors[i, 1] = y / m;
    vectors[i, 2] = z / m;
}
    Website: https://www.codeproject.com/articles/19310/hitting-a-moving-target-the-missile-guidance-syste

File compression utility algorithm.
import lzma
data = b"Insert Data Here"
with lzma.open("file.xz", "w") as f:
    f.write(data)
# link: https://docs.python.org/3/library/lzma.html#compressing-and-decompressing-data-in-memory

Weather forecasting algorithm.
import requests
 
print("\t\tWelcome to the Weather Forecaster!\n\n")
print("Just Enter the City you want the weather report for and click on the button! It's that simple!\n\n")
 
city_name = input("Enter the name of the City : ")
print("\n\n")
 
# Function to Generate Report
def Gen_report(C):
    url = 'https://wttr.in/{}'.format(C)
    try:
        data = requests.get(url)
        T = data.text
    except:
        T = "Error Occurred"
    print(T)
     
Gen_report(city_name)
#Website: https://www.askpython.com/python/examples/weather-forecast-using-python

E-commerce checkout system process.
from django.urls import path
from . import views
urlpatterns = [
    path("", views.index, name="index"),
    path("cart/", views.cart, name="cart"),
    path("checkout/", views.checkout, name="checkout"),
    path("update_item/", views.updateItem, name="update_item"),
    path("product_view/<int:myid>/", views.product_view, name="product_view"),
    path("search/", views.search, name="search"),
    path("contact/", views.contact, name="contact"),
    path("loggedin_contact/", views.loggedin_contact, name="loggedin_contact"),
 
    path("register/", views.register, name="register"),
    path("change_password/", views.change_password, name="change_password"),
    path("login/", views.Login, name="login"),
    path("logout/", views.Logout, name="logout"),
]
Websites: https://data-flair.training/blogs/python-online-shopping-system/

Social media post scheduler.
import tweepy
import time
auth = tweepy.OAuthHandler("consumer_key", "consumer_secret")
auth.set_access_token("access_token", "access_token_secret")
api = tweepy.API(auth)
tweets = ["Monday motivation! ðŸ’ª", "Tuesday tip: always be learning ðŸ“š", "Hump day humor ðŸ˜‚", "Throwback Thursday to when we launched our first product ðŸš€", "Friday feels! ðŸŽ‰"]
for tweet in tweets:
    api.update_status(tweet)
    time.sleep(86400) # wait 24 hours before posting the next tweet
# Website:https://www.sololearn.com/blog/python-social-media/ # this code uses the Tweepy function to automate tweets every 24 hours

Fitness app calorie counter.
# code to calculate calories burnt during workout
# no special packages required
# creating function
def countcals(gender, age, weight, heart_rate, time):
    # determining the gender
    if gender == "male":
        # implementing calculation for male
        calories = (
            ((age * 0.2017) + (weight * 0.09036) + (heart_rate * 0.6309) - 55.0969)
            * time
        ) / 4.184
    elif gender == "female":
        # implementing calculation for female
        calories = (
            ((age * 0.074) + (weight * 0.05741) + (heart_rate * 0.4472) - 20.4022)
            * time
        ) / 4.184
    else:
        # error raised
        calories = "Cannot be calculated, wrong input!"
    # function will return calories burnt based on the formulae
    return calories


# driver code
# getting user input
gender = input("Enter gender,(male/female)= ")
age = int(input("Enter age in years only= "))
weight = int(input("Enter weight in kilograms only= "))
heart_rate = int(input("Enter heart rate= "))
time = int(input("Enter duration of workout in hours only= "))
# function call
burnedcals = countcals(gender, age, weight, heart_rate, time)
# display result
print("the calories you burnt were= ", burnedcals)
# Website: https://www.askpython.com/python/examples/calculating-calories-burnt-during-workout

Online voting system mechanics.
{% extends "poll/base.html" %}
{% block title %}Candidate{% endblock %}
{% block content %}
{% if messages %}
 {% for message in messages %}
   <div class="alert alert-danger" role="alert">{{ message }}</div>
 {% endfor %}
{% endif %}
<br />
<div class="container-fluid as-full">
 <h3 class="card-title d-flex justify-content-center">
   Available Candidates for the Election of
 </h3>
 <h2 class="card-title d-flex justify-content-center">{{ obj.title }}</h2>
</div>
<br />
<div class="container-fluid as-full">
 <div class="row as-full d-flex justify-content-center">
   <div class="col-5 align-self-center">
     <div class="card">
       <div class="card-body">
         <form action="" method="POST">
           {% csrf_token %}
           <table class="table table-striped table-hover">
             <thead>
               <tr>
                 <th scope="col">Candidate</th>
                 <th scope="col">Vote</th>
               </tr>
             </thead>
             <tbody>
               {% for candidateID in obj.candidate_set.all %}
               <tr>
                 <td>
                   <a href="{% url 'detail' candidateID.id %}">{{candidateID.name}}</a>
                 </td>
                 <td>
                   <input
                     type="radio"
                     id="id_{{candidateID.id}}"
                     name="{{candidateID.position}}"
                     value="{{candidateID.id}}"
                     class="custom-control-input"
                     required
                  />
                 </td>
               </tr>
               {% empty %}
                 <p>No Candidates Available</p>
               {% endfor %}
             </tbody>
           </table>
           <input
             type="submit"
             class="col-md-12 btn btn-primary"
             value="Vote"
          />
         </form>
       </div>
     </div>
   </div>
 </div>
</div>
<br />
<br />
<br />
<br />
<br />
<div class="container-fluid as-full">
 <div class="row as-full d-flex justify-content-center">
   <div class="col-5 align-self-center">
     <div class="card">
       <div class="card-body">
         <a href="{% url 'position' %}" class="col-md-12 btn btn-primary">Go Back</a>
       </div>
     </div>
   </div>
 </div>
</div>
<style>
 body {
   background: linear-gradient(45deg, #b57bee, #00e3fd);
   background-repeat: no-repeat;
   background-attachment: fixed;
   background-size: cover;
 }
</style>
{% endblock %}
# Website: https://pythongeeks.org/python-django-online-voting-system/

Automated email response system.
#!/usr/bin/env python
#autoreply.py
import smtplib
import sys
from email.mime.multipart import MIMEMultipart
from email.mime.text import MIMEText

# me == my email address
# you == recipient's email address
me = "my@email.com"
you = "you@email.com"

# Create message container - the correct MIME type is multipart/alternative.
msg = MIMEMultipart('alternative')
msg['Subject'] = "Link"
msg['From'] = me
msg['To'] = you

# Create the body of the message (a plain-text and an HTML version).
text = open(sys.argv[1], 'r')
html = open(sys.argv[2], 'r')

# Record the MIME types of both parts - text/plain and text/html.
part1 = MIMEText(text.read(), 'plain')
text.close()
part2 = MIMEText(html.read(), 'html')
html.close()

# Attach parts into message container.
# According to RFC 2046, the last part of a multipart message, in this case
# the HTML message, is best and preferred.
msg.attach(part1)
msg.attach(part2)

# Send the message via local SMTP server.
s = smtplib.SMTP('smtprelay.gameloft.org')
# sendmail function takes 3 arguments: sender's address, recipient's address
# and message to send - here it is sent as one string.
s.sendmail(me, you, msg.as_string())
s.quit()
# Website: https://www.freecodecamp.org/news/how-to-build-an-automated-email-system-with-python/